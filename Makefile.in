# Copyright (c) 2018, Suphanat Chunhapanya
# This file is part of Kelner.
#
# Kelner is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# Kelner is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Kelner.  If not, see <https://www.gnu.org/licenses/>.
ARCH = @KELNER_ARCH@
NASMFLAGS = -f bin
RUSTFLAGS = -Z pre-link-arg=-nostartfiles -Z pre-link-arg=-Tlayout.ld
CLIPPYFLAGS = --all-features --all-targets
QEMUMEM = 128M
MANIFESTPATH = kernel/Cargo.toml
TARGETDIR = target
CLEANFILES = build $(TARGETDIR)
DEEPCLEANFILES = .bin
DISTCLEANFILES = @KELNER_CONFIG_FILES@ config.log config.status
TARGET = $(ARCH)-unknown-none
STANDARD_LIBS = alloc
CUSTOMIZED_CARGO = .bin/cargo
CUSTOMIZED_CARGO_CMD = RUSTUP_TOOLCHAIN=$(shell cat rust-toolchain) \
	$(CUSTOMIZED_CARGO)
STANDARD_LIB_FILENAMES = $(addsuffix .rlib, $(addprefix lib, $(STANDARD_LIBS)))
VERBOSE =
@KELNER_VERBOSE@ VERBOSE = --verbose
@KELNER_FATAL_WARNINGS@ NASMFLAGS += -Werror
@KELNER_FATAL_WARNINGS@ RUSTFLAGS += -D warnings
@KELNER_FATAL_WARNINGS@ CLIPPYFLAGS += -- -D warnings

.PHONY: all
all: build/disk

.PHONY: clean
clean:
	rm -rf $(CLEANFILES)

.PHONY: deepclean
deepclean:
	rm -rf $(CLEANFILES) $(DEEPCLEANFILES)

.PHONY: distclean
distclean:
	rm -rf $(CLEANFILES) $(DEEPCLEANFILES) $(DISTCLEANFILES)

.PHONY: qemu
qemu: build/disk
	qemu-system-$(ARCH) -m $(QEMUMEM) -drive file=$<,format=raw

.PHONY: debug
debug: build/diskdev
	qemu-system-$(ARCH) -m $(QEMUMEM) -s -drive file=$<,format=raw \
		-monitor tcp:127.0.0.1:1235,server,nowait & \
		sleep 15 && gdb && fg

.PHONY: check
check:
	mkdir -p build
	cargo test \
		$(VERBOSE) \
		--manifest-path $(MANIFESTPATH) \
		--target-dir $(TARGETDIR)
	cargo clippy \
		$(VERBOSE) \
		--manifest-path $(MANIFESTPATH) \
		--target-dir $(TARGETDIR) \
		$(CLIPPYFLAGS)

.PHONY: doc
doc:
	cargo doc \
		$(VERBOSE) \
		--manifest-path $(MANIFESTPATH) \
		--target-dir $(TARGETDIR)

.PHONY: privdoc
privdoc:
	cargo doc --document-private-items \
		$(VERBOSE) \
		--manifest-path $(MANIFESTPATH) \
		--target-dir $(TARGETDIR)

build/disk: build/kernel bootloader/*
	mkdir -p build
	nasm $(NASMFLAGS) -o $@ \
		-D KERNEL_FILE=../$< -ibootloader/ \
		-D ENTRY_POINT=$(shell objdump -f $(TARGETDIR)/$(TARGET)/release/kernel | \
			grep "start address" | cut -d ' ' -f 3) \
		-D BSS_SIZE=$(shell size -x $(TARGETDIR)/$(TARGET)/release/kernel | \
			awk '{$$1=$$1};1' | tail -n 1 | cut -d ' ' -f 3) \
		bootloader/disk.asm

build/diskdev: build/kerneldev bootloader/*
	mkdir -p build
	nasm $(NASMFLAGS) -o $@ \
		-D KERNEL_FILE=../$< -ibootloader/ \
		-D ENTRY_POINT=$(shell objdump -f $(TARGETDIR)/$(TARGET)/debug/kernel | \
			grep "start address" | cut -d ' ' -f 3) \
		-D BSS_SIZE=$(shell size -x $(TARGETDIR)/$(TARGET)/debug/kernel | \
			awk '{$$1=$$1};1' | tail -n 1 | cut -d ' ' -f 3) \
		bootloader/disk.asm

build/kernel: $(CUSTOMIZED_CARGO) \
	$(addprefix $(TARGETDIR)/$(TARGET)/release/, $(STANDARD_LIB_FILENAMES)) \
	$(shell find kernel -type f)
	mkdir -p build
	$(CUSTOMIZED_CARGO_CMD) rustc \
		$(VERBOSE) \
		--target kernel/targets/$(TARGET).json \
		--manifest-path $(MANIFESTPATH) \
		--target-dir $(TARGETDIR) \
		--release -- $(RUSTFLAGS)
	objcopy -O binary -S $(TARGETDIR)/$(TARGET)/release/kernel $@

build/kerneldev: $(CUSTOMIZED_CARGO) \
	$(addprefix $(TARGETDIR)/$(TARGET)/debug/, $(STANDARD_LIB_FILENAMES)) \
	$(shell find kernel -type f)
	mkdir -p build
	$(CUSTOMIZED_CARGO_CMD) rustc \
		$(VERBOSE) \
		--target kernel/targets/$(TARGET).json \
		--manifest-path $(MANIFESTPATH) \
		--target-dir $(TARGETDIR) \
		-- $(RUSTFLAGS)
	objcopy -O binary -S $(TARGETDIR)/$(TARGET)/debug/kernel $@

# Compile our customized Cargo.
$(CUSTOMIZED_CARGO): $(shell find cargo -type f)
	mkdir -p $(TARGETDIR)
	mkdir -p $(dir $@)
	cargo build \
		--manifest-path cargo/Cargo.toml \
		--target-dir $(TARGETDIR) \
		--release
	cp $(TARGETDIR)/release/cargo $(CUSTOMIZED_CARGO)

# Compile all standard libraries dependencies for debug environment.
# Please note that when the target json file changes, this will not recompile.
# I still don't know how to force Cargo to compile in this case.
$(TARGETDIR)/$(TARGET)/debug/lib%.rlib: \
	rust/src/lib%/Cargo.toml \
	$(CUSTOMIZED_CARGO) \
	kernel/targets/$(TARGET).json
	$(CUSTOMIZED_CARGO_CMD) rustc \
		$(VERBOSE) \
		--manifest-path $< \
		--target kernel/targets/$(TARGET).json \
		--target-dir $(TARGETDIR) \
		-- -A unused_attributes

# Compile all standard libraries dependencies for release environment.
# Please note that when the target json file changes, this will not recompile.
# I still don't know how to force Cargo to compile in this case.
$(TARGETDIR)/$(TARGET)/release/lib%.rlib: \
	rust/src/lib%/Cargo.toml \
	$(CUSTOMIZED_CARGO) \
	kernel/targets/$(TARGET).json
	$(CUSTOMIZED_CARGO_CMD) rustc \
		$(VERBOSE) \
		--manifest-path $< \
		--target kernel/targets/$(TARGET).json \
		--target-dir $(TARGETDIR) \
		--release \
		-- -A unused_attributes
